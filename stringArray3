package queue;

public class MyStringArray {
	private int size;
	private String[] s;

	public MyStringArray(int si){
		size=si;
		s = new String[size];
	}

	public MyStringArray(){
		size=2;
		s = new String[size];//数组一旦初始化，就没法改变长度
	}

	public void getRanking(String element){
		this.mergeSort();
		
		if (s!=null){
			int i=0;
			while(element!=s[i]&& i<this.size()){
				i++;
			}
			if(i==this.size()&&element!=s[i]){
				System.out.println("do not contain");
			} 
			else 
				System.out.println(i);

		}else 
			System.out.println("the String is null");


	}


	public void mergeSort(){
		if(size<2) return;
		mergesort(0,this.size()-1);//用size会出现溢出的问题，因为数组可能不是满的，存在null
	}

	private void mergesort(int low,int high){	
		if(low<high){
			int middle=low+(high-low)/2;
			mergesort(low,middle);
			mergesort(middle+1,high);
			merge(low,middle,high);
		}		
	}

	private void merge(int low,int middle,int high){

		String[] temporary=new String[size];
		int i=low;
		int j=middle+1;
		int k=0;

		while(i<=middle && j<=high){
			if( s[i].compareTo(s[j])<0 || s[i].compareTo(s[j])==0){

				temporary[k]=s[i];
				i++;
				k++;
			}else{	
				temporary[k]=s[j];
				j++;
				k++;
			}

		}

		while(i<=middle){
			temporary[k]=s[i];
			i++;
			k++;
		}

		while(j<=high){
			temporary[k++]=s[j++];
			j++;
			k++;
		}	

		for(i=low,k=0;i<=high;i++,k++){
			s[i]=temporary[k];
		}
	}		


	/*	private void merge(int low,int middle,int high){
		temp=s;
		for(int i=low;i<=high;i++){
			temp[i]=s[i];
		}
		int i=low;
		int j=middle+1;
		int k=low;

		while(i<=middle && j<=high){
			if(temp[i].compareTo(temp[j])<0 || temp[i].compareTo(temp[j])==0){
				s[k]=temp[i];
				i++;
				k++;
			}else{
				s[k]=temp[j];
				j++;
				k++;
			}
		}

		while(i<=middle){
			s[k]=temp[i];
			i++;
			k++;
		}

		while(j<=high){
			s[k]=temp[j];
			j++;
			k++;
		}	
	}		*/

	public void add(String a){

		int i1=this.size();
		if(i1<size){
			s[i1]=a;
		}else{
			size*=2;
			String[] s1;
			s1=new String[size];
			System.arraycopy(s, 0, s1,0, s.length);

			/*for(int i=0;i<size/2;i++){
				s1[i]=s[i];
			}*/

			s1[i1]=a;
			s=s1;
		}

	}

	public int getSize(){
		return size;
	}

	public void bubbleSort() { 
		String tempt; 
		for(int i=0; i<size-1; i++){ 
			if(s[i]!=null){
				for(int j=i+1; j<size; j++){ 
					if(s[j]!=null){
						if(s[i].compareTo(s[j])<0){
							tempt=s[i]; 
							s[i]=s[j]; 
							s[j]=tempt; 
						} 
					}
				}
			}	
		}		
		for(int i=0;i<size;i++)  
			System.out.println(s[i]);  
	}


	public void remove(int k) throws NoElementException
	{
		if((k>=0)&&(k<size)&&(s[k]!=null))
		{			
			s[k]=null;
		}
		else throw new NoElementException();
	}

	public String get(int i3) throws NoElementException{
		if(s[i3]!=null) return s[i3];
		else throw new NoElementException(); 		
	}

	public int size(){
		if (s!=null) {
			int i4=0;
			while(s[i4]!=null){
				if(i4==s.length-1) {
					return s.length;
				}
				i4++;
			}
			return i4;
		}
		else return 0;
	}

	public boolean isEmpty(){
		return s==null;
	}

}

@SuppressWarnings("serial")
class NoElementException extends Exception {

	public NoElementException(){
		System.out.println("No element.");
	}

}
